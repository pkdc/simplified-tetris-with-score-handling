{"mappings":"IAyEAA,EAzEA,MACIC,YAAYC,EAAMC,GACdC,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,C,CAGZE,cACA,OAAOD,KAAKF,I,CAEZI,cACA,OAAOF,KAAKD,I,CAIZI,YAAQC,GACRJ,KAAKF,KAAOM,C,CAEZC,YAAQC,GACRN,KAAKD,KAAOO,C,CAGhBC,cAAgB,SAASC,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIT,KAAKD,KAAMU,IAAK,CAChC,MAAMC,EAAOC,SAASC,iBAAiB,MAAMH,KAC7C,IAEII,EAFAC,EAAU,IAAIJ,GAClBK,QAAQC,IAAIF,GAGZD,EAAYC,EAAQG,OAAOC,GAAOA,EAAGC,UAAUC,SAAS,cACxDL,QAAQC,IAAI,YAAaH,GACrBA,IACAL,GAAS,IACTE,EAAKW,SAAQH,GAAMA,EAAGI,W,CAI9B,OAAOd,C,EAGXe,cAAgB,WACZ,MAAMC,EAAYb,SAASc,cAAc,OACzCD,EAAUL,UAAUO,IAAI,cAIxB,IAAK,IAAIjB,EAAI,EAAGA,EAAIT,KAAKD,KAAMU,IAC3B,IAAK,IAAIkB,EAAI,EAAGA,EAAI3B,KAAKF,KAAM6B,IAAK,CAChC,MAAMC,EAAajB,SAASc,cAAc,OAC1CG,EAAWT,UAAUO,IAAI,eACzBE,EAAWT,UAAUO,IAAI,KAAKC,KAC9BC,EAAWT,UAAUO,IAAI,KAAKjB,KAK9Be,EAAUK,OAAOD,E,CAGzB,IAAK,IAAIE,EAAI,EAAGA,EAAG9B,KAAKF,KAAMgC,IAAK,CAC/B,MAAMF,EAAajB,SAASc,cAAc,OACtCG,EAAWT,UAAUO,IAAI,eACzBE,EAAWT,UAAUO,IAAI,KAAKI,KAC9BF,EAAWT,UAAUO,IAAI,QACzBE,EAAWT,UAAUO,IAAI,YACzBF,EAAUK,OAAOD,E,CAEzB,OAAOJ,C,GChEf,IAAIO,EAAQ,EACRC,EAAQ,EACRC,EAAgBC,KAAKC,MAElB,MAAMC,EAAYzB,SAASc,cAAc,OAChDW,EAAUjB,UAAUO,IAAI,cACxBU,EAAUC,YAAc,UAAUN,IAE3B,MAAMO,EAAQ,WACjB,MAAMC,EAAWL,KAAKC,MAAQF,EACxBO,EAAMC,KAAKC,MAAMH,EAAS,GAAG,IAAK,IAAII,WAAWC,SAAS,EAAG,KAC7DC,EAAMJ,KAAKC,MAAMH,EAAS,IAAK,IAAII,WAAWC,SAAS,EAAG,KAChER,EAAUC,YAAc,UAAUL,aAAiBD,YAAgBS,KAAOK,G,EAGjEC,EAAY,SAASC,GAI9BhC,QAAQC,IAAI+B,GACZf,EAAQe,EAAUxC,cAAcyB,GAChCD,G,ECrBJ,MAAMiB,EACFnD,YAAYoD,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAaC,EAAOC,GAC5D3D,KAAKiD,GAAKA,EACVjD,KAAKkD,GAAKA,EACVlD,KAAKmD,GAAKA,EACVnD,KAAKoD,GAAKA,EACVpD,KAAKqD,GAAKA,EACVrD,KAAKsD,GAAKA,EACVtD,KAAKuD,GAAKA,EACVvD,KAAKwD,GAAKA,EACVxD,KAAKyD,YAAcA,EACnBzD,KAAK0D,MAAQA,EACb1D,KAAK2D,OAASA,C,CA+BhBC,KAAKC,EAAWd,GAEd,IAKIe,EAAW,CALFnD,SAASoD,cAAc,MAAM/D,KAAKiD,QAAQjD,KAAKkD,MAC/CvC,SAASoD,cAAc,MAAM/D,KAAKmD,QAAQnD,KAAKoD,MAC/CzC,SAASoD,cAAc,MAAM/D,KAAKqD,QAAQrD,KAAKsD,MAC/C3C,SAASoD,cAAc,MAAM/D,KAAKuD,QAAQvD,KAAKwD,OAUxDQ,GAAU,EAwBd,GAhBAA,EAVmB,CAJFrD,SAASoD,cAAc,MAAM/D,KAAKiD,QAAQjD,KAAKkD,GAAG,KAClDvC,SAASoD,cAAc,MAAM/D,KAAKmD,QAAQnD,KAAKoD,GAAG,KAClDzC,SAASoD,cAAc,MAAM/D,KAAKqD,QAAQrD,KAAKsD,GAAG,KAClD3C,SAASoD,cAAc,MAAM/D,KAAKuD,QAAQvD,KAAKwD,GAAG,MAW5CS,MAAM/C,GAUlBA,EAAGC,UAAUC,SAAS,cAGjCL,QAAQC,IAAI,WAAYgD,GAGpBhE,KAAKkD,IAAMH,EAAU7C,QAAQ,GAAKF,KAAKoD,IAAML,EAAU7C,QAAQ,GAAKF,KAAKsD,IAAMP,EAAU7C,QAAQ,GAAKF,KAAKwD,IAAMT,EAAU7C,QAAQ,GAAK8D,EAAS,CAEnJhE,KAAK2D,QAAS,EACd,IAAK,MAAMzC,KAAM4C,EACf5C,EAAGC,UAAUO,IAAI,YACjBR,EAAGgD,MAAMC,WAAanE,KAAKyD,YAK7B,OAFqBT,EAAYoB,UAAUP,EAAWd,E,CAMxD/C,KAAKkD,IAAM,EACXlD,KAAKoD,IAAM,EACXpD,KAAKsD,IAAM,EACXtD,KAAKwD,IAAM,EAGXM,EAASzC,SAAQ,SAASH,GACxBA,EAAGC,UAAUG,OAAO,W,IAOxB+C,QAAQvE,GACN,GAAIE,KAAKiD,KAAOnD,EAAK,GAAKE,KAAKmD,KAAOrD,EAAK,GAAKE,KAAKqD,KAAOvD,EAAK,GAAKE,KAAKuD,KAAOzD,EAAK,EACrF,OAQiB,CAJFa,SAASoD,cAAc,MAAM/D,KAAKiD,GAAG,OAAOjD,KAAKkD,MACjDvC,SAASoD,cAAc,MAAM/D,KAAKmD,GAAG,OAAOnD,KAAKoD,MACjDzC,SAASoD,cAAc,MAAM/D,KAAKqD,GAAG,OAAOrD,KAAKsD,MACjD3C,SAASoD,cAAc,MAAM/D,KAAKuD,GAAG,OAAOvD,KAAKwD,OAGjDS,MAAM/C,GAAOA,EAAGC,UAAUC,SAAS,gBAKpDL,QAAQC,IAAIhB,MACZA,KAAKiD,IAAM,EACXjD,KAAKmD,IAAM,EACXnD,KAAKqD,IAAM,EACXrD,KAAKuD,IAAM,E,CAGbe,SAEE,GAAgB,IAAZtE,KAAKiD,IAAwB,IAAZjD,KAAKmD,IAAwB,IAAZnD,KAAKqD,IAAwB,IAAZrD,KAAKuD,GAC1D,OAQiB,CAJF5C,SAASoD,cAAc,MAAM/D,KAAKiD,GAAG,OAAOjD,KAAKkD,MACjDvC,SAASoD,cAAc,MAAM/D,KAAKmD,GAAG,OAAOnD,KAAKoD,MACjDzC,SAASoD,cAAc,MAAM/D,KAAKqD,GAAG,OAAOrD,KAAKsD,MACjD3C,SAASoD,cAAc,MAAM/D,KAAKqD,GAAG,OAAOrD,KAAKsD,OAGjDW,MAAM/C,GAAOA,EAAGC,UAAUC,SAAS,gBAKpDpB,KAAKiD,IAAM,EACXjD,KAAKmD,IAAM,EACXnD,KAAKqD,IAAM,EACXrD,KAAKuD,IAAM,E,CAIbgB,S,CAcAC,QACE,IAAIC,EAAS9D,SAASoD,cAAc,MAAM/D,KAAKiD,QAAQjD,KAAKkD,MACxDwB,EAAS/D,SAASoD,cAAc,MAAM/D,KAAKmD,QAAQnD,KAAKoD,MACxDuB,EAAShE,SAASoD,cAAc,MAAM/D,KAAKqD,QAAQrD,KAAKsD,MACxDsB,EAASjE,SAASoD,cAAc,MAAM/D,KAAKuD,QAAQvD,KAAKwD,MAE5DiB,EAAOP,MAAMC,WAAa,cAC1BO,EAAOR,MAAMC,WAAa,cAC1BQ,EAAOT,MAAMC,WAAa,cAC1BS,EAAOV,MAAMC,WAAa,a,CAI5BU,SAKE9D,QAAQC,IAAIhB,KAAKiD,GAAIjD,KAAKkD,IAC1BnC,QAAQC,IAAIhB,KAAKmD,GAAInD,KAAKoD,IAC1BrC,QAAQC,IAAIhB,KAAKqD,GAAIrD,KAAKsD,IAC1BvC,QAAQC,IAAIhB,KAAKuD,GAAIvD,KAAKwD,IAC1BzC,QAAQC,IAAIL,SAASoD,cAAc,MAAM/D,KAAKiD,QAAQjD,KAAKkD,OAC3D,IAAIuB,EAAS9D,SAASoD,cAAc,MAAM/D,KAAKiD,QAAQjD,KAAKkD,MACxDwB,EAAS/D,SAASoD,cAAc,MAAM/D,KAAKmD,QAAQnD,KAAKoD,MACxDuB,EAAShE,SAASoD,cAAc,MAAM/D,KAAKqD,QAAQrD,KAAKsD,MACxDsB,EAASjE,SAASoD,cAAc,MAAM/D,KAAKuD,QAAQvD,KAAKwD,MAG5DiB,EAAOP,MAAMC,WAAanE,KAAKyD,YAC/BiB,EAAOR,MAAMC,WAAanE,KAAKyD,YAC/BkB,EAAOT,MAAMC,WAAanE,KAAKyD,YAC/BmB,EAAOV,MAAMC,WAAanE,KAAKyD,W,CAIjCqB,sBAAsB/B,GAGpB,IAAIE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAaC,EAAOC,EAFxDb,EAAUC,GACVhC,QAAQC,IAAI,OAAQ+B,EAAU9C,SAE9B,MAAM8E,EAAOtC,KAAKC,MAAoB,EAAdD,KAAKuC,UAI7B,OADAjE,QAAQC,IAAI,gBAAgB+D,KACrBA,GACL,KAAK,EACH9B,EAAKF,EAAU9C,QAAQ,EAAI,EAC3BiD,EAAK,EACLC,EAAKJ,EAAU9C,QAAQ,EAAI,EAC3BmD,EAAK,EACLC,EAAKN,EAAU9C,QAAQ,EACvBqD,EAAK,EACLC,EAAKR,EAAU9C,QAAQ,EAAI,EAC3BuD,EAAK,EACLC,EAAc,UACdC,EAAQ,OACRC,GAAS,EACT,MACF,KAAK,EACHV,EAAKF,EAAU9C,QAAQ,EAAI,EAC3BiD,EAAK,EACLC,EAAKJ,EAAU9C,QAAQ,EACvBmD,EAAK,EACLC,EAAKN,EAAU9C,QAAQ,EAAI,EAC3BqD,EAAK,EACLC,EAAKR,EAAU9C,QACd,EACDuD,EAAK,EACLC,EAAc,SACdC,EAAQ,KACRC,GAAS,EAOb,OAJA5C,QAAQC,IAAIiC,EAAIC,GAChBnC,QAAQC,IAAImC,EAAIC,GAChBrC,QAAQC,IAAIqC,EAAIC,GAChBvC,QAAQC,IAAIuC,EAAIC,GACT,CAACP,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAaC,EAAOC,E,CAG9DmB,iBAAiBjB,EAAWd,GAS1B,OAPAhC,QAAQC,IAAI,YAAa+B,EAAU9C,SACnC4D,EAAY,IAAIb,KAAeA,EAAYiC,eAAelC,IAC1DhC,QAAQC,IAAI,QAAS,GAAG6C,EAAUH,SAClC3C,QAAQC,IAAI,UAAW,GAAG6C,EAAUF,UAEpCE,EAAUgB,SAEHhB,C,MAIfqB,EAAelC,ECtQf,IAAImC,EACAC,EACAC,EAAOC,EAEPC,EADAC,GAAU,EAGD7E,SAASoD,cAAc,QAApC,MACM0B,EAAO9E,SAASoD,cAAc,SAE9B2B,EAAO/E,SAASc,cAAc,OAC9BkE,EAAOhF,SAASc,cAAc,OAC9BmE,EAAOjF,SAASc,cAAc,OAEpCgE,EAAK5D,OAAO6D,GACZD,EAAK5D,OAAO8D,GACZF,EAAK5D,OAAO+D,GAEZF,EAAK7D,OAAOO,GACZ,MAAMyD,EAAY,IAAIjG,EAAS,GAAI,IACnC+F,EAAK9D,OAAOgE,EAAUtE,iBA+CtBZ,SAASmF,iBAAiB,WAAYC,IACpB,cAAVA,EAAEC,MACFjF,QAAQC,IAAI,YAhChBmE,EAAO,GAmCO,eAAVY,EAAEC,MACFjF,QAAQC,IAAI,SAhChBD,QAAQC,IAAI,YACZuE,EAAUf,QACVe,EAAUlB,QAAQwB,EAAU5F,SAC5BsF,EAAUV,UAgCI,cAAVkB,EAAEC,MACFjF,QAAQC,IAAI,QA3BhBD,QAAQC,IAAI,WACZuE,EAAUf,QACVe,EAAUjB,SACViB,EAAUV,S,IAiCd,MAAMoB,EAAY,SAASC,GAGlBd,IACDA,EAAWc,GAGDA,EAAYd,GACXD,IAxEF,WAEbI,EAAUf,QACV,MAAM2B,EAAUZ,EAAU3B,KAAK2B,EAAWM,GACtCM,IACAZ,EAAYY,GAEhBZ,EAAUV,Q,CAkENuB,GACAf,EAAQgB,sBAAsBC,IAG9BhB,EAASe,sBAAsBJ,E,EAIjCK,EAAM,WAERnB,EAAO,IACPC,EAAW,KACXrE,QAAQC,IAAI,UACZsE,EAASe,sBAAsBJ,GAC/B3D,G,EAIJ3B,SAASmF,iBAAiB,WAAYC,IACpB,UAAVA,EAAEC,MAEGR,IACDA,GAAU,EACVc,K,IAKZf,EAAYL,EAAYd,UAAUmB,EAAWM,GAC7CvD","sources":["table.js","scoreboard.js","tetris-block.js","index.js"],"sourcesContent":["class gameArea {\n    constructor(maxX, maxY) {\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n    // getters\n    get getMaxX() {\n        return this.maxX;\n    }\n    get getMaxY() {\n        return this.maxY;\n    }\n\n    // setters\n    set setMaxX(x) {\n        this.maxX = x;\n    }\n    set setMaxY(y) {\n        this.maxY = y;\n    }\n    \n    removeOneLine = function(score) {\n        for (let j = 0; j < this.maxY; j++) {\n            const line = document.querySelectorAll(`.y-${j}`);\n            let lineArr = [...line];\n            console.log(lineArr);\n            let wholeLine;\n            // let wholeLine = true;\n            wholeLine = lineArr.every((el) => el.classList.contains(\"occupied\"));\n            console.log(\"wholeLine\", wholeLine);\n            if (wholeLine) {\n                score += 100;\n                line.forEach(el => el.remove());   \n            }\n            // gameArea.addNewLine(); // not implemented yet\n        }\n        return score;\n    };\n\n    generateTable = function() {\n        const gameTable = document.createElement(\"div\");\n        gameTable.classList.add(\"game-table\");\n\n        // create game table area\n        // const maxY=20, maxX=10;\n        for (let j = 0; j < this.maxY; j++) {\n            for (let i = 0; i < this.maxX; i++) {\n                const tablePixel = document.createElement(\"div\");\n                tablePixel.classList.add(\"table-pixel\");\n                tablePixel.classList.add(`x-${i}`);\n                tablePixel.classList.add(`y-${j}`);\n                // const pixelVal = document.createElement(\"input\");\n                // pixelVal.value = 0; // 0 means free, 1 means occupied\n                // pixelVal.style.display = \"none\";\n                // tablePixel.append(pixelVal);\n                gameTable.append(tablePixel);\n            }\n        }\n        for (let k = 0; k <this.maxX; k++) {\n            const tablePixel = document.createElement(\"div\");\n                tablePixel.classList.add(\"table-pixel\");\n                tablePixel.classList.add(`x-${k}`);\n                tablePixel.classList.add(`y-20`);\n                tablePixel.classList.add(\"occupied\");\n                gameTable.append(tablePixel);\n        }\n        return gameTable;\n    };\n\n// const addNewLine = function() {\n\n// };\n}\nexport default gameArea;","\"use strict\"\n\nlet round = 0;\nlet score = 0;\nlet gameStartTime = Date.now();\n\nexport const scoreArea = document.createElement(\"div\");\nscoreArea.classList.add(\"score-area\");\nscoreArea.textContent = `round: ${round}`;\n\nexport const timer = function() {\n    const playTime = Date.now() - gameStartTime;\n    const min = Math.floor(playTime/60/1000%60).toString().padStart(2, \"0\");\n    const sec = Math.floor(playTime/1000%60).toString().padStart(2, \"0\");\n    scoreArea.textContent = `Score: ${score}, Round: ${round}, Time: ${min}:${sec}`;\n}\n\nexport const nextRound = function(gameBoard) {\n    // if 4 lines, remove it, add score\n    \n    // if a line, remove it, add score\n    console.log(gameBoard);\n    score = gameBoard.removeOneLine(score);\n    round++;\n};\n\n\n","\"use strict\";\nimport {nextRound} from './scoreboard.js';\nclass tetrisBlock {\n    constructor(x1, y1, x2, y2, x3, y3, x4, y4, blockColour, shape, locked) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.x3 = x3;\n        this.y3 = y3;\n        this.x4 = x4;\n        this.y4 = y4;\n        this.blockColour = blockColour;\n        this.shape = shape;\n        this.locked = locked;\n        // this.canMove = canMove;\n      }\n\n      // get getBlock1() {return {x: _x1, y: _y1};}\n      // get getBlock2() {return {x: _x2, y: _y2};}\n      // get getBlock3() {return {x: _x3, y: _y3};}\n      // get getBlock4() {return {x: _x4, y: _y4};}\n      // get getShape() {return _shape;}\n\n      // set setBlock1({x, y}) {\n      //   this._x1 = x;\n      //   this._y1 = y;\n      // }\n      // set setBlock2({x, y}) {\n      //   this._x2 = x;\n      //   this._y2 = y;\n      // }\n      // set setBlock3({x, y}) {\n      //   this._x3 = x;\n      //   this._y3 = y;\n      // }\n      // set setBlock4({x, y}) {\n      //   this._x4 = x;\n      //   this._y4 = y;\n      // }\n      // set setCanMove(able) {\n      //   this._canMove = able;\n      // }\n\n      // slowFall\n      fall(curBlocks, gameBoard) {\n        // console.log(this);\n        let block1 = document.querySelector(`.x-${this.x1}.y-${this.y1}`);\n        let block2 = document.querySelector(`.x-${this.x2}.y-${this.y2}`);\n        let block3 = document.querySelector(`.x-${this.x3}.y-${this.y3}`);\n        let block4 = document.querySelector(`.x-${this.x4}.y-${this.y4}`);\n\n        let blockArr = [block1, block2, block3, block4];\n\n        let nextBlock1 = document.querySelector(`.x-${this.x1}.y-${this.y1+1}`);\n        let nextBlock2 = document.querySelector(`.x-${this.x2}.y-${this.y2+1}`);\n        let nextBlock3 = document.querySelector(`.x-${this.x3}.y-${this.y3+1}`);\n        let nextBlock4 = document.querySelector(`.x-${this.x4}.y-${this.y4+1}`);\n        let nextBlockArr = [nextBlock1,nextBlock2,nextBlock3,nextBlock4]\n\n        let collide = false;\n\n        // if (blockArr.some(el => el.classList.contains(\"occupied\"))) {\n        //   blockArr.forEach(blk => blk.classList.add(\"occupied\"));\n        //   collide = true;\n        // }\n        // console.log(blockArr.some((el) => el.classList.contains(\"occupied\")))\n        // collide = blockArr.some((el) => el.classList.contains(\"occupied\"));\n        collide = nextBlockArr.some((el) => {\n        //   // const bStyles = window.getComputedStyle(el);\n        //   // const bBGColour = bStyles.getPropertyValue(\"background-color\");\n        //   // console.log(bBGColour);\n        //   // if (bBGColour !== \"rgb(189, 176, 176)\") {\n        //   //   console.log(\"another block reached\");\n        //   //   return true;\n        //   // }\n        //   // console.log(\"collided\");\n        //   // if (this.y1 !== 0 || this.y2 !== 0 || this.y3 !== 0 || this.y4 !== 0 || this.y1 !== 1 || this.y2 !== 1 || this.y3 !== 1 || this.y4 !== 1 ) {\n            return el.classList.contains(\"occupied\");\n        //   // }\n        });\n        console.log(\"collided\", collide);\n\n        // lock the blocks\n        if (this.y1 >= gameBoard.getMaxY-1 || this.y2 >= gameBoard.getMaxY-1 || this.y3 >= gameBoard.getMaxY-1 || this.y4 >= gameBoard.getMaxY-1 || collide) {\n          // console.log(\"can't move\");\n          this.locked = true;\n          for (const el of blockArr) {\n            el.classList.add(\"occupied\");\n            el.style.background = this.blockColour;\n          }\n          // console.log(this.locked);\n          const returnBlocks = tetrisBlock.newBlocks(curBlocks, gameBoard);\n\n          return returnBlocks;\n        } \n        \n        // move the blocks down by 1\n        this.y1 += 1;\n        this.y2 += 1;\n        this.y3 += 1;\n        this.y4 += 1;\n\n        // remove the prev occupied class after moving out the pixel\n        blockArr.forEach(function(el) {\n          el.classList.remove(\"occupied\");\n        });\n\n        return;\n      }\n\n      // check if there is a wall next to it\n      mvRight(maxX) {\n        if (this.x1 === maxX-1 || this.x2 === maxX-1 || this.x3 === maxX-1 || this.x4 === maxX-1) {\n          return;\n        }\n\n        // check if there is another block\n        let nextBlock1 = document.querySelector(`.x-${this.x1+1}.y-${this.y1}`);\n        let nextBlock2 = document.querySelector(`.x-${this.x2+1}.y-${this.y2}`);\n        let nextBlock3 = document.querySelector(`.x-${this.x3+1}.y-${this.y3}`);\n        let nextBlock4 = document.querySelector(`.x-${this.x4+1}.y-${this.y4}`);\n        let nextBlockArr = [nextBlock1,nextBlock2,nextBlock3,nextBlock4]\n\n        if (nextBlockArr.some((el) => el.classList.contains(\"occupied\"))) {\n          return;\n        }\n        \n        // move right\n        console.log(this);\n        this.x1 += 1;\n        this.x2 += 1;\n        this.x3 += 1;\n        this.x4 += 1;\n      }\n\n      mvLeft() {\n        // check if there is a wall next to it\n        if (this.x1 === 0 || this.x2 === 0 || this.x3 === 0 || this.x4 === 0) {\n          return;\n        }\n\n        // check if there is another block\n        let nextBlock1 = document.querySelector(`.x-${this.x1-1}.y-${this.y1}`);\n        let nextBlock2 = document.querySelector(`.x-${this.x2-1}.y-${this.y2}`);\n        let nextBlock3 = document.querySelector(`.x-${this.x3-1}.y-${this.y3}`);\n        let nextBlock4 = document.querySelector(`.x-${this.x3-1}.y-${this.y3}`);\n        let nextBlockArr = [nextBlock1,nextBlock2,nextBlock3,nextBlock4]\n\n        if (nextBlockArr.some((el) => el.classList.contains(\"occupied\"))) {\n          return;\n        }\n\n        // move left\n        this.x1 -= 1;\n        this.x2 -= 1;\n        this.x3 -= 1;\n        this.x4 -= 1;\n      }\n\n      // rotate\n      rotate() {\n        // switch(this.shape) {\n        //   case \"rect\":\n        //     console.log(this.shape);\n        //     // just making it vertical...\n        //     this.x2 = this.x1;\n        //     this.x3 = this.x1;\n        //     this.x4 = this.x1\n        //     this.y2 = this.y1+1;\n        //     this.y3 = this.y1+2;\n        //     this.y4 = this.y1+3;\n        // }\n      }\n\n      erase() {\n        let block1 = document.querySelector(`.x-${this.x1}.y-${this.y1}`);\n        let block2 = document.querySelector(`.x-${this.x2}.y-${this.y2}`);\n        let block3 = document.querySelector(`.x-${this.x3}.y-${this.y3}`);\n        let block4 = document.querySelector(`.x-${this.x4}.y-${this.y4}`);\n\n        block1.style.background = \"var(--grey)\";\n        block2.style.background = \"var(--grey)\";\n        block3.style.background = \"var(--grey)\";\n        block4.style.background = \"var(--grey)\";\n      }\n\n      // colour\n      colour() {\n\n        // if (!this.locked) {\n\n        // }\n        console.log(this.x1, this.y1);\n        console.log(this.x2, this.y2);\n        console.log(this.x3, this.y3);\n        console.log(this.x4, this.y4);\n        console.log(document.querySelector(`.x-${this.x1}.y-${this.y1}`));\n        let block1 = document.querySelector(`.x-${this.x1}.y-${this.y1}`);\n        let block2 = document.querySelector(`.x-${this.x2}.y-${this.y2}`);\n        let block3 = document.querySelector(`.x-${this.x3}.y-${this.y3}`);\n        let block4 = document.querySelector(`.x-${this.x4}.y-${this.y4}`);\n        // console.log(block1);\n\n        block1.style.background = this.blockColour;\n        block2.style.background = this.blockColour;\n        block3.style.background = this.blockColour;\n        block4.style.background = this.blockColour;\n      }\n\n      // generate\n      static generateTBlock(gameBoard) {\n        nextRound(gameBoard);\n        console.log(\"maxX\", gameBoard.getMaxX);\n        let x1, y1, x2, y2, x3, y3, x4, y4, blockColour, shape, locked;\n        const rand = Math.floor(Math.random()*2);\n        // const rand = 1;\n        // const rand = 0;\n        console.log(`generate new ${rand}`);\n        switch(rand) {\n          case 0: // rectangle\n            x1 = gameBoard.getMaxX/2 - 2;\n            y1 = 0;\n            x2 = gameBoard.getMaxX/2 - 1;\n            y2 = 0;\n            x3 = gameBoard.getMaxX/2;\n            y3 = 0;\n            x4 = gameBoard.getMaxX/2 + 1;\n            y4 = 0;\n            blockColour = \"skyblue\";\n            shape = \"rect\";\n            locked = false;\n            break;\n          case 1: // sq\n            x1 = gameBoard.getMaxX/2 - 1;\n            y1 = 0;\n            x2 = gameBoard.getMaxX/2;\n            y2 = 0;\n            x3 = gameBoard.getMaxX/2 - 1;\n            y3 = 1;\n            x4 = gameBoard.getMaxX\n            /2;\n            y4 = 1;\n            blockColour = \"yellow\";\n            shape = \"sq\";\n            locked = false;\n            break;\n        }\n        console.log(x1, y1);\n        console.log(x2, y2);\n        console.log(x3, y3);\n        console.log(x4, y4);\n        return [x1, y1, x2, y2, x3, y3, x4, y4, blockColour, shape, locked];\n      }\n\n      static newBlocks(curBlocks, gameBoard) {\n        // generate\n        console.log(\"game maxX\", gameBoard.getMaxX);\n        curBlocks = new tetrisBlock(...tetrisBlock.generateTBlock(gameBoard));\n        console.log(\"shape\", `${curBlocks.shape}`);\n        console.log(\"locked?\", `${curBlocks.locked}`);\n        // console.log(`blocks created`);\n        curBlocks.colour();\n        // console.log(`blocks coloured`);\n        return curBlocks;\n    }\n};\n\nexport default tetrisBlock;\n\n// tetrisBlock.prototype.slowDrop = function() {\n\n// };\n// tetrisBlock.prototype.rotate \n// tetrisBlock.prototype.moveRight\n// tetrisBlock.prototype.moveLeft\n// tetrisBlock.prototype.fastDrop\n\n      // fastFall\n      // fastFall(maxY) {\n      //   console.log(this);\n      //   wait = 1000;\n      //   if (this.y1 >= maxY-1 || this.y2 >= maxY-1 || this.y3 >= maxY-1 || this.y4 >= maxY-1) {\n      //     console.log(\"bottom reached\");\n      //     this.canMove = false;\n      //     return;\n      //   }\n      //   // const bStyles = window.getComputedStyle(this);\n      //   // const bBGColour = bStyles.getPropertyValue(\"background\");\n      //   // if (bBGColour !== \"var(--grey)\") {\n      //     // console.log(\"another block reached\");\n      //   // }\n      //   // console.log(this.y1);\n      //   this.y1 += 1;\n      //   this.y2 += 1;\n      //   this.y3 += 1;\n      //   this.y4 += 1;\n      // }","\"use strict\";\n\nimport gameArea from './table.js';\nimport {scoreArea, timer} from './scoreboard.js';\nimport tetrisBlock from './tetris-block.js';\n\nlet wait;\nlet prevTime;\nlet runID, waitID;\nlet started = false;\nlet curBlocks;\n\nconst body = document.querySelector(\"body\");\nconst root = document.querySelector(\"#root\");\n\nconst box1 = document.createElement(\"div\");\nconst box2 = document.createElement(\"div\");\nconst box3 = document.createElement(\"div\");\n\nroot.append(box1);\nroot.append(box2);\nroot.append(box3);\n\nbox1.append(scoreArea);\nconst gameBoard = new gameArea(10, 20);\nbox2.append(gameBoard.generateTable());\n\nconst slowDrop = function() {\n    // console.log(\"slow\");\n    curBlocks.erase();\n    const rBlocks = curBlocks.fall(curBlocks, gameBoard);\n    if (rBlocks) {\n        curBlocks = rBlocks;\n    }\n    curBlocks.colour();\n    // timeoutID = setTimeout(() => {    \n    //     globalID = requestAnimationFrame(slowDrop);\n    // }, 500);\n    return;\n};\n\nconst fastDrop = function() {\n    wait = 0;\n};\n\nconst moveRight = function() {\n    console.log(\"Mv Right\");\n    curBlocks.erase();\n    curBlocks.mvRight(gameBoard.getMaxX);\n    curBlocks.colour();\n    // mvRight += 10;\n    // blockGroup.style.right = `${mvRight}px`;\n}\n\nconst moveLeft = function() {\n    console.log(\"Mv Left\");\n    curBlocks.erase();\n    curBlocks.mvLeft();\n    curBlocks.colour();\n    // mvLeft += 10;\n    // blockGroup.style.right = `${mvLeft}px`;\n}\n\n// const rotateTBlock = function() {\n//     console.log(`rotate! ${curBlocks.shape}`);\n//     curBlocks.erase();\n//     curBlocks.rotate();\n//     curBlocks.colour();\n// }\n\n\n\ndocument.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"ArrowDown\") {\n        console.log(\"fastDrop\");\n        fastDrop();\n    }\n    if (e.key === \"ArrowRight\") {\n        console.log(\"Right\");\n        moveRight();\n    }\n    if (e.key === \"ArrowLeft\") {\n        console.log(\"Left\");\n        moveLeft();\n    }\n    // if (e.key === \"ArrowUp\") {\n    //     console.log(\"Up, rotate\");\n    //     rotateTBlock();\n    // }\n});\n\nconst checkWait = function(timestamp) {\n    // if the fall is called right after the execution of the game (prevTime is falsy)\n    // i.e. executes if just after falling one row\n    if (!prevTime) {\n        prevTime = timestamp;\n    }\n\n    let runtime = timestamp - prevTime;\n    if (runtime >= wait) {\n        slowDrop(); // fall a line if runtime of this round has exceeded the wait time (1 sec if slow, 0 if fast)\n        runID = requestAnimationFrame(run);\n    } else {\n        // continue waiting, and listening to events\n        waitID = requestAnimationFrame(checkWait);\n    }\n}\n\nconst run = function() {\n    // after falling a line, reset prevTime and wait (in case it's changed by fast drop)\n    wait = 1000;\n    prevTime = null;\n    console.log(\"in run\");\n    waitID = requestAnimationFrame(checkWait);\n    timer();\n}\n\n// press \"Enter\" to start game\ndocument.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"Enter\") {\n        // To prevent run being called multiple times\n        if (!started) {\n            started = true;\n            run();\n            // startedID = requestAnimationFrame(run);\n        }\n    }\n});\ncurBlocks = tetrisBlock.newBlocks(curBlocks, gameBoard);\ntimer();\n    // next comming up window\n    // const commingUp = document.createElement(\"div\");\n    // commingUp.classList.add(\"comming-up\");\n    // commingUp.style.position = \"fixed\";\n    // commingUp.style.top = \"100px\";\n    // commingUp.style.left = `${document.documentElement.clientWidth - 100}px`;\n    // commingUp.textContent = \"block shape\";\n    // wrapper.append(commingUp);"],"names":["$9f33eec3311c2d77$export$2e2bcd8739ae039","constructor","maxX","maxY","this","getMaxX","getMaxY","setMaxX","x","setMaxY","y","removeOneLine","score","j","line","document","querySelectorAll","wholeLine","lineArr","console","log","every","el","classList","contains","forEach","remove","generateTable","gameTable","createElement","add","i","tablePixel","append","k","$d4072406a0a83368$var$round","$d4072406a0a83368$var$score","$d4072406a0a83368$var$gameStartTime","Date","now","$d4072406a0a83368$export$bfa30dbd7413c441","textContent","$d4072406a0a83368$export$9dc4ecf953986f04","playTime","min","Math","floor","toString","padStart","sec","$d4072406a0a83368$export$28968a0329181373","gameBoard","$a21d7c78e434dfba$var$tetrisBlock","x1","y1","x2","y2","x3","y3","x4","y4","blockColour","shape","locked","fall","curBlocks","blockArr","querySelector","collide","some","style","background","newBlocks","mvRight","mvLeft","rotate","erase","block1","block2","block3","block4","colour","static","rand","random","generateTBlock","$a21d7c78e434dfba$export$2e2bcd8739ae039","$dad545c909cfec2d$var$wait","$dad545c909cfec2d$var$prevTime","$dad545c909cfec2d$var$runID","$dad545c909cfec2d$var$waitID","$dad545c909cfec2d$var$curBlocks","$dad545c909cfec2d$var$started","$dad545c909cfec2d$var$root","$dad545c909cfec2d$var$box1","$dad545c909cfec2d$var$box2","$dad545c909cfec2d$var$box3","$dad545c909cfec2d$var$gameBoard","addEventListener","e","key","$dad545c909cfec2d$var$checkWait","timestamp","rBlocks","$dad545c909cfec2d$var$slowDrop","requestAnimationFrame","$dad545c909cfec2d$var$run"],"version":3,"file":"index.ea1f8fd2.js.map"}